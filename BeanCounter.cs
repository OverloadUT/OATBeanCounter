// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using KSP.IO;
using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;

namespace OATBeanCounter
{
	[KSPAddon(KSPAddon.Startup.EditorAny, false)]
	public class BeanCounter : KSPPluginFramework.MonoBehaviourExtended
	{
		private static String VERSION = "0.01";  // Current version

		private BCEditorWindow editorWindow;

		internal override void Awake()
		{
            editorWindow = gameObject.AddComponent<BCEditorWindow>();

            RenderingManager.AddToPostDrawQueue(1, DrawGUI);
		}
		
		private void OnApplicationQuit()
		{
			LogFormatted_DebugOnly("OnApplicationQuit()");
		}
		
		internal override void Start()
		{
			// TODO Config file stuff will probably go here
			
			LogFormatted("Start() executed");
		}
		
		internal override void Update()
		{
			if(EditorLogic.fetch != null)
			{
				editorWindow.Visible = true;
			}
		}

		void DrawGUI()
		{
			editorWindow.Visible = true;
		}
	}

    public class BCEditorWindow : KSPPluginFramework.MonoBehaviourWindow
    {
    	internal override void Awake()
    	{
            WindowRect = new Rect(0, 0, 200, 100);
            Visible =  true;
            DragEnabled = true;
            //WindowOptions[0] = GUILayout.ExpandHeight(true);
            WindowCaption="OAT Bean Counter";
    	}

        internal override void DrawWindow(int id)
        {
        	float cost = parts.Sum(p => p.partInfo.cost);
			GUILayout.Label(String.Format("Cost: {0}", cost));
			foreach (Part part in parts) {
				string partname = part.partInfo.name;
				GUILayout.BeginVertical("box");
				GUILayout.Label(partname);
				if(part.Resources.Count > 0)
				{
					foreach(PartResource res in part.Resources)
					{
						if (res.info.unitCost == 0 || res.amount == 0) {
							continue;
						}
						double tonnage = res.amount * res.info.density;
						double rescost = res.amount * res.info.unitCost;
						GUILayout.Label(String.Format("{0}: {1:f2}t (${2:f0})",
							res.resourceName, tonnage, rescost));
					}
				}
				GUILayout.EndVertical();
			}
        }

		internal override void Update()
		{
		}

		// TODO: currently only works in the editor. Blank list otherwise
        List<Part> parts
        {
            get
            {
            	if (HighLogic.LoadedSceneIsEditor) {
            		List<Part> parts = EditorLogic.fetch.ship.parts;
            		if (parts != null
            			&& parts.Count > 0) {
            			return parts;
            		} else {
            			return new List<Part>();
            		}
            	}

                return new List<Part>();
            }
        }
    }
#if DEBUG
    // Auto load the testing save when debugging
    [KSPAddon(KSPAddon.Startup.MainMenu, false)]
    public class Debug_AutoLoadPersistentSaveOnStartup : MonoBehaviour
    {
        //use this variable for first run to avoid the issue with when this is true and multiple addons use it
        public static bool first = true;
        public void Start()
        {
            //only do it on the first entry to the menu
            if (first)
            {
                first = false;
                HighLogic.SaveFolder = "BeanCounterTesting";
                Game game = GamePersistence.LoadGame("persistent", HighLogic.SaveFolder, true, false);

                if (game != null && game.flightState != null && game.compatible)
                {
                    Int32 FirstVessel = 0;
                    Boolean blnFoundVessel=false;
                    // Uncomment this to load the first available vessel
                    // for (FirstVessel = 0; FirstVessel < game.flightState.protoVessels.Count; FirstVessel++)
                    // {
                    //     if (game.flightState.protoVessels[FirstVessel].vesselType != VesselType.SpaceObject &&
                    //         game.flightState.protoVessels[FirstVessel].vesselType != VesselType.Unknown)
                    //     {
                    //         blnFoundVessel = true;
                    //         break;
                    //     }
                    // }
					if (!blnFoundVessel)
					{
						FirstVessel = 0;
						game.Start();
					}
					else
					{
                    	FlightDriver.StartAndFocusVessel(game, FirstVessel);
					}
                }

                //CheatOptions.InfiniteFuel = true;
            }
        }
    }
#endif
}
