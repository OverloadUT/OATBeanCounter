// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using KSP.IO;
using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;

namespace OATBeanCounter
{

    [KSPAddon(KSPAddon.Startup.TrackingStation, false)]
    public class BC_Tracking_Station : BeanCounter
    {

    }

    [KSPAddon(KSPAddon.Startup.Flight, false)]
    public class BC_Flight : BeanCounter
    {

    }

    [KSPAddon(KSPAddon.Startup.SpaceCentre, false)]
    public class BC_SpaceCenter : BeanCounter
    {
        
    }

    [KSPAddon(KSPAddon.Startup.EditorVAB, false)]
    public class BC_VABEditor : BeanCounter
    {

    }

    [KSPAddon(KSPAddon.Startup.EditorSPH, false)]
    public class BC_SPHEditor : BeanCounter
    {

    }

	public class BeanCounter : MonoBehaviourExtended
	{
		// TODO handle versioning better
		public static String VERSION = "0.01";  // Current version

		private BCEditorWindow editorWindow;

		internal override void Awake()
		{

			if (!BCEvents.instance.eventsAdded)
			{
				BCEvents.instance.addEvents();
			}

            editorWindow = gameObject.AddComponent<BCEditorWindow>();
            RenderingManager.AddToPostDrawQueue(1, DrawGUI);
		}
		
		private void OnApplicationQuit()
		{
			LogFormatted_DebugOnly("OnApplicationQuit()");
		}
		
		internal override void Start()
		{
			InitializePersistence();
		}
		
		internal override void Update()
		{
			if(EditorLogic.fetch != null)
			{
				editorWindow.Visible = true;
			}
		}

		private void InitializePersistence()
		{
			LogFormatted_DebugOnly("InitializePersistence()");
			// TODO change scenario module name manually so the OATBeanCounterData class can be consistent with the rest of the code
			ProtoScenarioModule scenario = HighLogic.CurrentGame.scenarios.Find(s => s.moduleName == typeof(OATBeanCounterData).Name);
            if (scenario == null)
            {
                try
                {
                    LogFormatted("Scenario had no BeanCounter data - Adding to scenario '{0}'", HighLogic.CurrentGame.Title);
                    HighLogic.CurrentGame.AddProtoScenarioModule(typeof(OATBeanCounterData), new GameScenes[] {GameScenes.FLIGHT, GameScenes.SPACECENTER, GameScenes.EDITOR, GameScenes.SPH, GameScenes.TRACKSTATION});
                    // the game will add this scenario to the appropriate persistent file on save from now on
                }
                catch
                {
                    LogFormatted("Exception while trying to add scenario data");
                }
            }
		}

		void DrawGUI()
		{
			editorWindow.Visible = true;
		}
	}

	public class VesselResource
	{
		public PartResourceDefinition info;
		public double maxAmount = 0;
		public double amount = 0;
		public string resourceName;

		public VesselResource(PartResourceDefinition partinfo, string name)
		{
			resourceName = name;
			info = partinfo;
		}

		public VesselResource(PartResourceDefinition partinfo, string name, double amt, double max) : this(partinfo, name)
		{
			amount = amt;
			maxAmount = max;
		}

		public void Add(PartResource pr) {
			amount += pr.amount;
			maxAmount += pr.maxAmount;
		}

		public double mass
		{
			get
			{
				return amount * info.density;
			}
		}

		public double cost
		{
			get
			{
				return amount * info.unitCost;
			}
		}
	}

// THIS BREAKS THE GAME IN .25! WHYYYYYYYY
// It causes a bunch of NREs in the space center
//#if DEBUG
//    // Auto load the testing save when debugging
//    [KSPAddon(KSPAddon.Startup.MainMenu, false)]
//    public class Debug_AutoLoadPersistentSaveOnStartup : MonoBehaviour
//    {
//        //use this variable for first run to avoid the issue with when this is true and multiple addons use it
//        public static bool first = true;
//        public void Start()
//        {
//            //only do it on the first entry to the menu
//            if (first)
//            {
//                first = false;
//                HighLogic.SaveFolder = "BeanCounterTesting";
//                Game game = GamePersistence.LoadGame("persistent", HighLogic.SaveFolder, true, false);
//
//                if (game != null && game.flightState != null && game.compatible)
//                {
//                    Int32 FirstVessel = 0;
//                    Boolean blnFoundVessel=false;
//                    // Uncomment this to load the first available vessel
//                    // for (FirstVessel = 0; FirstVessel < game.flightState.protoVessels.Count; FirstVessel++)
//                    // {
//                    //     if (game.flightState.protoVessels[FirstVessel].vesselType != VesselType.SpaceObject &&
//                    //         game.flightState.protoVessels[FirstVessel].vesselType != VesselType.Unknown)
//                    //     {
//                    //         blnFoundVessel = true;
//                    //         break;
//                    //     }
//                    // }
//					if (!blnFoundVessel)
//					{
//						FirstVessel = 0;
//						game.Start();
//					}
//					else
//					{
//                    	FlightDriver.StartAndFocusVessel(game, FirstVessel);
//					}
//                }
//
//                //CheatOptions.InfiniteFuel = true;
//            }
//        }
//    }
//#endif
}
