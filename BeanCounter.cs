// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using KSP.IO;
using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;

namespace OATBeanCounter
{
	/// <summary>
	/// KSPAddon with equality checking using an additional type parameter.
	/// Fixes the issue where AddonLoader prevents multiple start-once addons
	/// with the same start scene.
	/// </summary>
	public class KSPAddonFixed : KSPAddon, IEquatable<KSPAddonFixed>
	{
		private readonly Type type;
		
		public KSPAddonFixed(KSPAddon.Startup startup, bool once, Type type)
			: base(startup, once)
		{
			this.type = type;
		}
		
		public override bool Equals(object obj) {
			if (obj.GetType() != this.GetType()) { return false; }
			return Equals((KSPAddonFixed)obj);
		}
		
		public bool Equals(KSPAddonFixed other)
		{
			if (this.once != other.once) { return false; }
			if (this.startup != other.startup) { return false; }
			if (this.type != other.type) { return false; }
			return true;
		}
		
		public override int GetHashCode()
		{
			return this.startup.GetHashCode() ^ this.once.GetHashCode() ^ this.type.GetHashCode();
		}
	}

	[KSPAddonFixed(KSPAddon.Startup.MainMenu, true, typeof(BeanCounter))]
	public class BeanCounter : KSPPluginFramework.MonoBehaviourExtended
	{
		private static String VERSION = "0.01";  // Current version
		private const int MAINWINID = 1801;  // Main window ID
		
		// Config file
		private static PluginConfiguration BCConfig = null;
		
		// Main window eidth and height
		private static int mainWidth = 120;
		private static int mainHeight = 10;
		
		// Main window position and size
		private Rect mainWin = new Rect(Screen.width / 2, Screen.height / 4, mainWidth, mainHeight);  
		
		private bool minimize = false;
		private bool doOneFrame = false;
		private bool f2pressed = false;
		
		private static double sumDelta = 0;
		
		private static FontStyle FSGlobal = FontStyle.Normal;
		private static Color ACol = Color.red;

		internal override void Awake()
		{
			DontDestroyOnLoad(this);

			base.Awake();
		}
		
		private void OnApplicationQuit()
		{
			// Save configuration file
			saveConfig();
		}
		
		internal override void Start()
		{
			// TODO Config file stuff will probably go here
			
			Debug.Log("BeanCounter: Start() executed");

			base.Start ();
		}
		
		internal override void Update()
		{
			if (Input.GetKeyDown(KeyCode.F2))
				f2pressed = !f2pressed;
			
			// Some example code to only update cals 3 times per second
			sumDelta += Time.deltaTime;
			if (sumDelta > 0.33)
			{
				doOneFrame = true;
				sumDelta = 0;
			}

			base.Update ();
		}
		
		// TODO this whole thing is copied from a tutorial script
		// replace with whatever makes sense
		private void OnGUI()
		{
			if (f2pressed) {
				return;  // clear the GUI for screenies
			}
			
			if (FlightGlobals.fetch != null && FlightGlobals.ActiveVessel != null)  // Check if in flight
			{
				if (FlightGlobals.ActiveVessel.isEVA) // EVA kerbal, do nothing
					return;
				// do_flight_mode_stuff
			}
			else if (EditorLogic.fetch != null) // Check if in editor
			{
				// do editor stuff
			}
			else // Not in flight, in editor or F2 pressed unset the mode and return
			{
				// skip this scene
				return;
			}
			
			if (doOneFrame && !minimize)
			{
				doOneFrame = !doOneFrame;
				// do calcs etc, 3 per second
			}
			
			if (!minimize) // not minimized, show windows
			{
				GUI.skin = GUI.skin;
				mainWin = GUILayout.Window(MAINWINID, mainWin, drawBCWindow, "BC Window", GUILayout.ExpandWidth(true), GUILayout.ExpandHeight(true));
			}
		}
		
		private void saveConfig()
		{
			// TODO: Config file should be saved here
			// BCConfig.SetValue("version", VERSION);
			// BCConfig.save();
		}
		
		private void drawBCWindow(int windowID)
		{
			// Draw a window 
			GUIStyle BCStyle = new GUIStyle(GUI.skin.window);
			// BCStyle.fontStyle = FSGlobal;
			// BCStyle.alignment = TextAnchor.UpperLeft;
			// BCStyle.normal.textColor = ACol;
			
			GUILayout.BeginVertical();
			GUILayout.Label("Bean Counter!");
			foreach (Part part in parts) {
				string partname = part.name;
				GUILayout.Button(partname);
			}
			GUILayout.EndVertical();
			
			// Make window draggable
			GUI.DragWindow();
		}

		// TODO: currently only works in the editor. Blank list otherwise
        List<Part> parts
        {
            get
            {
            	if (HighLogic.LoadedSceneIsEditor) {
            		List<Part> parts = EditorLogic.fetch.ship.parts;
            		if (parts != null
            			&& parts.Count > 0) {
            			return parts;
            		} else {
            			return new List<Part>();
            		}
            	}

                return new List<Part>();
            }
        }

		public static void var_dump(object obj)   
		{
			Debug.Log(String.Format("{0,-18} {1}", "Name", "Value"));
			string ln = @"-------------------------------------
				----------------------------";   
			Debug.Log(ln);   
			  
			Type t = obj.GetType();   
			PropertyInfo[] props = t.GetProperties();   
			  
			for(int i = 0; i < props.Length; i++)   
			{   
				try   
				{   
					Debug.Log(String.Format("{0,-18} {1}",   
						props[i].Name, props[i].GetValue(obj, null)));
				}   
				catch(Exception e)   
				{   
					//Debug.Log(e);   
				}   
			}   
			Debug.Log(""); 
		}
	}
}
